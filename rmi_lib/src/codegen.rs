// < begin copyright >
// Copyright Ryan Marcus 2020
//
// See root directory of this project for license terms.
//
// < end copyright >

use crate::models::*;
use crate::models::Model;
use crate::train::TrainedRMI;

use itertools::Itertools;
use bytesize::ByteSize;
use log::*;
use std::io::Write;
use std::str;
use std::fs;
use std::fs::File;
use std::io::BufWriter;
use std::path::Path;
use std::fmt;

macro_rules! param_enumeration {
    ($idx: expr) => { (["first", "second", "third", "fourth", "fifth", "sixth"])[$idx] }
}

macro_rules! pred_to_model_index {
    ($from: expr) => {
        match $from {
            ModelDataType::Float => "        double_to_int(fpred, model_index);",
            ModelDataType::Int => "        model_index = ipred;",
        };
    }
}


enum LayerParams {
    Constant(usize, Vec<ModelParam>),
    Array(usize, usize, Vec<ModelParam>),
    MixedArray(usize, usize, Vec<ModelParam>)
}

impl LayerParams {

    fn new(idx: usize, array_access: bool, params_per_model: usize, params: Vec<ModelParam>) -> LayerParams {
        let first_param = params.first().unwrap();
        let mixed = !params.iter().all(|p| first_param.is_same_type(p)); // if the underlying data is mixed, we can only support array mode.

        if mixed { return LayerParams::MixedArray(idx, params_per_model, params); }
        if array_access { return LayerParams::Array(idx, params_per_model, params); }

        return LayerParams::Constant(idx, params);
    }

    fn table_code<T: Write>(&self, namespace: &str, data_dir: &str, needed_vars: &mut Vec<String>, target: &mut T) -> Result<(), std::io::Error> {
        let mut table_code = Vec::new();

        match self {
            LayerParams::Constant(_, _) => (),
            LayerParams::Array(idx, _, _) | LayerParams::MixedArray(idx, _, _) => {
                let data_path = Path::new(&data_dir).join(format!("{}_L{}_PARAMETERS", namespace, idx));
                let f = File::create(data_path).expect("Could not write data file to RMI directory");
                let mut bw = BufWriter::new(f);
                self.write_to(&mut bw)?; // write to data file

                let model_items = self.params()[0..self.params_per_model()].to_vec();
                let zero_params = vec![0; model_items.iter().map(|param| param.p4_param_amount()).sum()].iter().map(|_| 0).join(", ");

                let args = model_items.iter().enumerate().map(|(param_idx, param)|
                    format!("out {} {}", param.p4_type(), self.param_name(param_idx, *idx))
                ).join(", ");
                table_code.push(format!("control L{}_ModelLookup(in uint64_t model_index, {}) {{", idx, args));

                    let detailed_args = model_items.iter().enumerate().map(|(param_idx, param)|
                        param.p4_detailed(self.param_name(param_idx, *idx))
                    ).join(", ");
                    table_code.push(format!("    action assign_variables({}) {{", detailed_args));
                        model_items.iter().enumerate().for_each(|(param_idx, param)| table_code.push(param.p4_assign(self.param_name(param_idx, *idx))));
                    table_code.push("    }".to_string());

                    table_code.push(format!("    table l{}_model_lookup {{", *idx));
                        table_code.push("        key = { model_index: exact; }".to_string());
                        table_code.push("        actions = { assign_variables; NoAction; }".to_string());
                        table_code.push(format!("        const default_action = assign_variables({});", zero_params));
                        table_code.push(format!("        const size = {};", self.size()));
                    table_code.push("    }".to_string());

                    table_code.push(format!("    apply {{ assign_variables({}); l{}_model_lookup.apply(); }}", zero_params, *idx));
                table_code.push("}".to_string());

                needed_vars.push(format!("L{}_ModelLookup() l{}_lookup;", *idx, *idx));
                model_items.iter().enumerate().for_each(|(param_idx, param)| {
                    needed_vars.push(format!("{} {};", param.p4_type(), self.param_name(param_idx, *idx)));
                });
            }
        };

        for line in table_code { writeln!(target, "{}", line)?; }
        return Result::Ok(());
    }

    fn runtime_code<T: Write>(&self, namespace: &str, data_dir: &str, target: &mut T) -> Result<(), std::io::Error> {
        let mut runtime_code = Vec::new();

        match self {
            LayerParams::Constant(_, _) => (),
            LayerParams::Array(idx, _, _) | LayerParams::MixedArray(idx, _, _) => {
                let data_path = Path::new(&data_dir).join(format!("{}_L{}_PARAMETERS", namespace, idx));
                let file_path = fs::canonicalize(&data_path).unwrap();

                let model_items = self.params()[0..self.params_per_model()].to_vec();
                let model_size: usize = model_items.iter().map(|param| param.size()).sum();

                runtime_code.push(format!("def writeL{}Parameters(p4info_helper, switch):", *idx));
                runtime_code.push(format!("    if not os.path.exists('{}'): print('Parameters file for layer {} not found!'); return", file_path.to_str().unwrap(), idx));
                runtime_code.push("    model_index = 0".to_string());
                runtime_code.push(format!("    with open('{}', 'rb') as file:", file_path.to_str().unwrap()));
                runtime_code.push(format!("        bytes = file.read({} * BATCH_SIZE)", model_size));
                runtime_code.push("        while bytes:".to_string());
                runtime_code.push("            entries_batch = []".to_string());
                runtime_code.push("            for index in range(0, BATCH_SIZE):".to_string());
                runtime_code.push(format!("                model_bytes = bytes[({} * index):({} * (index + 1))]", model_size, model_size));

                let mut offset = 0;
                for (param_idx, param) in model_items.iter().enumerate() {
                    runtime_code.push(format!("                {} = int.from_bytes(model_bytes[{}:{}], byteorder='little')", self.param_name(param_idx, *idx), offset, offset + param.size()));
                    offset = offset + param.size();
                }

                runtime_code.push("                table_entry = p4info_helper.buildTableEntry(".to_string());
                    runtime_code.push(format!("                    table_name='LearnedIngress.lookup_instance.l{}_lookup.l{}_model_lookup',", idx, idx));
                    runtime_code.push("                    match_fields={ 'model_index': model_index },".to_string());
                    runtime_code.push(format!("                    action_name='LearnedIngress.lookup_instance.l{}_lookup.assign_variables',", idx));

                    let entry_params = model_items.iter().enumerate().flat_map(|(param_idx, param)| param.python_assign(self.param_name(param_idx, *idx))).join(", ");
                    runtime_code.push(format!("                    action_params={{ {} }},", entry_params));
                runtime_code.push("                )".to_string());

                runtime_code.push("                entries_batch.append(table_entry)".to_string());
                runtime_code.push("                model_index += 1".to_string());

                runtime_code.push("            switch.WriteTableEntries(entries_batch)".to_string());
                runtime_code.push("            print('Inserted %s table entries starting from index %s' % (BATCH_SIZE, model_index - BATCH_SIZE))".to_string());
                runtime_code.push(format!("            bytes = file.read({} * BATCH_SIZE)", model_size));

                runtime_code.push(format!("    print('Done inserting all L{} parameters from file! (Inserted %s entries)' % (model_index))", idx));
            }
        };

        for line in runtime_code { writeln!(target, "{}", line)?; }
        return Result::Ok(());
    }

    fn write_to<T: Write>(&self, target: &mut T) -> Result<(), std::io::Error> {
        match self {
            LayerParams::Array(_idx, _, params) | LayerParams::MixedArray(_idx, _, params) => {
                let (first, rest) = params.split_first().unwrap();

                first.write_to(target)?;
                for itm in rest {
                    if let LayerParams::Array(_, _, _) = self {
                        assert!(first.is_same_type(itm));
                    }
                    itm.write_to(target)?;
                }
                return Ok(());
            },
            LayerParams::Constant(_, _) => panic!("Cannot write constant parameters to binary file.")
        };
    }

    fn index(&self) -> usize {
        return match self {
            LayerParams::Array(idx, _, _) | LayerParams::MixedArray(idx, _, _) => *idx,
            LayerParams::Constant(idx, _) => *idx
        };
    }

    fn params(&self) -> &[ModelParam] {
        return match self {
            LayerParams::Array(_, _, params) | LayerParams::MixedArray(_, _, params) => params,
            LayerParams::Constant(_, params) => params
        };
    }

    fn params_per_model(&self) -> usize {
        return match self {
            LayerParams::Array(_idx, ppm, _params) | LayerParams::MixedArray(_idx, ppm, _params) => *ppm,
            LayerParams::Constant(_, params) => params.len()
        };
    }

    fn param_name(&self, param_idx: usize, layer_idx: usize) -> String {
        return format!("{}_l{}", param_enumeration!(param_idx), layer_idx);
    }

    fn size(&self) -> usize {
        return self.params().iter().map(|p| p.size()).sum();
    }

    fn with_zipped_errors(&self, lle: &[u64]) -> LayerParams {
        let params = self.params(); // TODO - integrate the errors into the model parameters of the last layer to save a cache miss.
        let combined_lle_params: Vec<ModelParam> =
            params.chunks(self.params_per_model())
            .zip(lle).flat_map(|(mod_params, err)| {
                let mut to_r: Vec<ModelParam> = Vec::new();
                to_r.extend_from_slice(mod_params);
                to_r.push(ModelParam::Int(*err));
                to_r
            }).collect();

        let is_constant = if let LayerParams::Constant(_, _) = self { true } else { false };
        return LayerParams::new(self.index(), is_constant, self.params_per_model() + 1, combined_lle_params);
    }
}

fn first_uppercase(s: String) -> String {
    let mut c = s.chars();
    match c.next() {
        None => String::new(),
        Some(f) => f.to_uppercase().collect::<String>() + c.as_str(),
    }
}

fn params_for_layer(layer_idx: usize, models: &[Box<dyn Model>]) -> LayerParams {
    let params_per_model = models[0].params_per_model();
    let params: Vec<ModelParam> = models.iter().flat_map(|m| m.params()).collect();

    return LayerParams::new(layer_idx, models.len() > 1 || (params.len() / params_per_model) > 1, params_per_model, params); // array access on non-singleton layers
}

pub fn rmi_size(rmi: &TrainedRMI) -> u64 {
    // compute the RMI size (used in the header, compute here before consuming)
    let mut num_total_bytes = 0;
    for layer in rmi.rmi.iter() {
        let model_on_this_layer_size: usize = layer[0].params().iter().map(|p| p.size()).sum();

        // assume all models on this layer have the same size
        num_total_bytes += model_on_this_layer_size * layer.len();
    }

    if !rmi.last_layer_max_l1s.is_empty() {
        num_total_bytes += rmi.rmi.last().unwrap().len() * 8;
    }

    if rmi.cache_fix.is_some() {
        num_total_bytes += rmi.cache_fix.as_ref().unwrap().1.len() * 16;
    }

    return num_total_bytes as u64;
}

fn learning_headers<T: Write>(target: &mut T) -> Result<(), std::io::Error> {
    writeln!(target,
"
const bit<64> HIDDEN_BIT = 0x0010000000000000;
const bit<11> EXPONENT_BIAS = 1023;
const bit<1> SIGN_MINUS = 1;
const bit<1> SIGN_PLUS = 0;

typedef bit<64> uint64_t;

typedef bit<1> sign_t;
typedef bit<11> exponent_t;
typedef bit<52> mantissa_t;

struct double_t {{
    sign_t sign;
    exponent_t exponent;
    mantissa_t mantissa;
}}

struct overflow128_t {{
    sign_t sign;
    exponent_t exponent;
    bit<128> mantissa;
}}

/* custom learned header definition */

header learned_t {{
    double_t key;

    uint64_t guess;
    uint64_t err;
}}
"
)?;
    return Ok(());
}

fn learning_normalization<T: Write>(target: &mut T) -> Result<(), std::io::Error> {
    writeln!(target,
"
/*************************************************************************
****************** Custom actions and controls **************************
*************************************************************************/

/* ====================== Normalization ====================== */

control FloatingNormalizer(inout overflow128_t overflow) {{
    action floating_shift_left(inout overflow128_t result, bit<8> amount) {{
        result.mantissa = result.mantissa << amount;
        result.exponent = result.exponent - (exponent_t) amount;
    }}

    action floating_shift_right(inout overflow128_t result, bit<8> amount) {{
        result.mantissa = result.mantissa >> amount;
        result.exponent = result.exponent + (exponent_t) amount;
    }}

    table floating_normalize {{
        key = {{
            overflow.mantissa: ternary;
        }}
        actions = {{
            floating_shift_left(overflow);
            floating_shift_right(overflow);
            NoAction;
        }}
        const default_action = NoAction();
        const entries = {{
            0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 75);
            0b01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 74);
            0b00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 73);
            0b00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 72);
            0b00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 71);
            0b00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 70);
            0b00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 69);
            0b00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 68);
            0b00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 67);
            0b00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 66);
            0b00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 65);
            0b00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 64);
            0b00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 63);
            0b00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 62);
            0b00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 61);
            0b00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 60);
            0b00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 59);
            0b00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 58);
            0b00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 57);
            0b00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 56);
            0b00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 55);
            0b00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 54);
            0b00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 53);
            0b00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 52);
            0b00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 51);
            0b00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 50);
            0b00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 49);
            0b00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 48);
            0b00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 47);
            0b00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 46);
            0b00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 45);
            0b00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 44);
            0b00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 43);
            0b00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 42);
            0b00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 41);
            0b00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 40);
            0b00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 39);
            0b00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 38);
            0b00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 37);
            0b00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 36);
            0b00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 35);
            0b00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 34);
            0b00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 33);
            0b00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 32);
            0b00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 31);
            0b00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 30);
            0b00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 29);
            0b00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 28);
            0b00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 27);
            0b00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 26);
            0b00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 25);
            0b00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 24);
            0b00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 23);
            0b00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 22);
            0b00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 21);
            0b00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 20);
            0b00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 19);
            0b00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 18);
            0b00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 17);
            0b00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 16);
            0b00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 15);
            0b00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 14);
            0b00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 13);
            0b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 12);
            0b00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 11);
            0b00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 10);
            0b00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 9);
            0b00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 8);
            0b00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 7);
            0b00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 6);
            0b00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 5);
            0b00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 4);
            0b00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 3);
            0b00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 2);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000: floating_shift_right(overflow, 1);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000: NoAction;
            0b00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000: floating_shift_left(overflow, 1);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000: floating_shift_left(overflow, 2);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000: floating_shift_left(overflow, 3);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000: floating_shift_left(overflow, 4);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000: floating_shift_left(overflow, 5);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000: floating_shift_left(overflow, 6);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000: floating_shift_left(overflow, 7);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000: floating_shift_left(overflow, 8);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000: floating_shift_left(overflow, 9);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000: floating_shift_left(overflow, 10);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000: floating_shift_left(overflow, 11);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000: floating_shift_left(overflow, 12);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000: floating_shift_left(overflow, 13);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000: floating_shift_left(overflow, 14);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000: floating_shift_left(overflow, 15);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000: floating_shift_left(overflow, 16);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000: floating_shift_left(overflow, 17);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000: floating_shift_left(overflow, 18);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000: floating_shift_left(overflow, 19);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000: floating_shift_left(overflow, 20);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000: floating_shift_left(overflow, 21);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000: floating_shift_left(overflow, 22);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000: floating_shift_left(overflow, 23);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000: floating_shift_left(overflow, 24);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000: floating_shift_left(overflow, 25);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000: floating_shift_left(overflow, 26);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000: floating_shift_left(overflow, 27);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000: floating_shift_left(overflow, 28);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000: floating_shift_left(overflow, 29);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000: floating_shift_left(overflow, 30);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000: floating_shift_left(overflow, 31);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000: floating_shift_left(overflow, 32);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000: floating_shift_left(overflow, 33);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000: floating_shift_left(overflow, 34);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000: floating_shift_left(overflow, 35);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000: floating_shift_left(overflow, 36);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000: floating_shift_left(overflow, 37);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000: floating_shift_left(overflow, 38);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000: floating_shift_left(overflow, 39);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000: floating_shift_left(overflow, 40);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000: floating_shift_left(overflow, 41);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000: floating_shift_left(overflow, 42);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000: floating_shift_left(overflow, 43);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000: floating_shift_left(overflow, 44);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000: floating_shift_left(overflow, 45);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000: floating_shift_left(overflow, 46);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000: floating_shift_left(overflow, 47);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000: floating_shift_left(overflow, 48);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000: floating_shift_left(overflow, 49);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100: floating_shift_left(overflow, 50);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110: floating_shift_left(overflow, 51);
            0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 &&& 0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111: floating_shift_left(overflow, 52);
        }}
    }}

    apply {{
        floating_normalize.apply();
    }}
}}
"
)?;
    return Ok(());
}

fn generate_code<T: Write>(code_output: &mut T, runtime_output: &mut T, namespace: &str, data_dir: &str,
    rmi: TrainedRMI, key_type: KeyType) -> Result<(), std::io::Error> {

    /* document head with custom types */
    writeln!(code_output,
"
/* -*- P4_16 -*- */
#include <core.p4>
#include <v1model.p4>

const bit<16> TYPE_LEARNED = 0x8008; // custom ether type

/*************************************************************************
*********************** H E A D E R S  ***********************************
*************************************************************************/

/* ethernet specific header definitions */

typedef bit<9>  egressSpec_t;
typedef bit<48> macAddr_t;
typedef bit<32> ip4Addr_t;

header ethernet_t {{
    macAddr_t dstAddr;
    macAddr_t srcAddr;
    bit<16>   etherType;
}}

/* learning specific header definitions */

/* floating point arithmetic definitions */
"
    )?;

    learning_headers(code_output)?;

    /* P4 header definitions */
    writeln!(code_output,
"
/* metadata struct definition */

struct metadata {{ /* empty */ }}

/* headers struct definition */

struct headers {{
    ethernet_t ethernet;
    learned_t learned;
}}
"
    )?;

    learning_normalization(code_output)?;

    /* other helper functions */
    writeln!(code_output,
"
/* ====================== Other helper functions ====================== */
action double_to_int(in double_t input, out uint64_t result) {{
    bit<128> temp = ((bit<128>) input.mantissa) | (bit<128>) HIDDEN_BIT;
    if (input.sign == SIGN_MINUS) {{
        result = 0; return;
    }} else if (input.exponent < EXPONENT_BIAS) {{
        temp = temp >> ((bit<8>) (EXPONENT_BIAS - input.exponent));
    }} else if (input.exponent > EXPONENT_BIAS) {{
        temp = temp << ((bit<8>) (input.exponent - EXPONENT_BIAS));
    }}

    temp = temp >> 52;
    result = (uint64_t) temp;
}}

action f_clamp(in uint64_t input, in uint64_t bound, out uint64_t result) {{
    result = input > bound ? bound : input;
}}
"
)?;

    /* create tables for all layers that need it */
    let mut needed_vars: Vec<String> = Vec::new(); // vec to keep order
    let mut layer_params: Vec<LayerParams> = rmi.rmi.iter().enumerate() // vec to keep order
        .map(|(layer_idx, models)| params_for_layer(layer_idx, models)).collect();

    /* append last layer errors to layer params */
    let lle = &rmi.last_layer_max_l1s;
    if lle.len() > 1 {
        let old_last = layer_params.pop().unwrap();
        let new_last = old_last.with_zipped_errors(lle);

        layer_params.push(new_last);
    }

    writeln!(code_output, "/* ====================== Learned lookup tables ====================== */")?;

    trace!("Layer parameters:");
    for lp in layer_params.iter() {
        trace!("{}", lp);
        lp.table_code(namespace, data_dir, &mut needed_vars, code_output)?;
    }

    /* get all of the required stdlib and model functions */
    let mut func_sigs = Vec::new();
    rmi.rmi.iter().flat_map(|layer| layer[0].standard_functions()).for_each(|stdlib| func_sigs.push(stdlib.code().to_string()));
    func_sigs.push("/* ====================== Learned models ====================== */".to_string());
    rmi.rmi.iter().for_each(|layer| func_sigs.push(layer[0].code()));
    for sig in func_sigs.iter().unique() { writeln!(code_output, "{}", sig)?; }

    for (layer_idx, layer) in rmi.rmi.iter().enumerate() {
        needed_vars.push(format!("Learned{}() l{}_{};", first_uppercase(layer[0].function_name()), layer_idx, layer[0].function_name()));
        match layer[0].output_type() {
            ModelDataType::Int => needed_vars.push("uint64_t ipred;".to_string()),
            ModelDataType::Float => needed_vars.push("double_t fpred;".to_string()),
        };
    }

    /* generating the actual lookup function */
    writeln!(code_output, "control LearnedLookup(in double_t input_key, out uint64_t guess, out uint64_t guess_err) {{")?;

        if rmi.rmi.len() > 1 { needed_vars.push("uint64_t model_index;".to_string()); }
        for var in needed_vars.iter().unique() {
            writeln!(code_output, "    {}", var)?;
        }

        writeln!(code_output, "    apply {{")?;

            let mut last_model_output = key_type.to_model_data_type();
            let mut needs_bounds_check = true;

            for (layer_idx, layer) in rmi.rmi.iter().enumerate() {
                let layer_param = &layer_params[layer_idx];
                let input = match layer[0].input_type() {
                    ModelDataType::Int => "model_index",
                    ModelDataType::Float => "input_key",
                };
                let target_pred = match layer[0].output_type() {
                    ModelDataType::Int => "ipred",
                    ModelDataType::Float => "fpred",
                };

                if layer.len() == 1 { // use constant indexing, we are on the first layer
                    if let ModelDataType::Int = layer[0].input_type() {
                        writeln!(code_output, "        double_to_int(input_key, model_index);")?;
                    }

                    if (layer_param.params().len() / layer_param.params_per_model()) > 1 { // we have several values, cannot use constants (probably using RadixTable)
                        writeln!(code_output, "        l{}_{}.apply({}, model_index);", layer_idx, layer[0].function_name(), input)?;
                        writeln!(code_output, "        l{}_lookup.apply(model_index, {});", layer_idx, target_pred)?;
                    } else {
                        let constants = layer[0].params().iter().map(|param| param.p4_val()).join(", "); // getting these directly from the Model
                        writeln!(code_output, "        l{}_{}.apply({}, {}, {});", layer_idx, layer[0].function_name(), constants, input, target_pred)?;
                    }
                } else { // we need to get the model index based on the previous prediction
                    let param_names = layer[0].params().iter().enumerate().map(|(param_idx, _)| layer_param.param_name(param_idx, layer_idx)).join(", ");

                    writeln!(code_output, "{}", pred_to_model_index!(last_model_output))?;
                    if needs_bounds_check {
                        writeln!(code_output, "        f_clamp(model_index, {}, model_index);", ModelParam::from(layer.len()).p4_val())?;
                    }

                    writeln!(code_output, "        l{}_lookup.apply(model_index, {}, guess_err);", layer_idx, param_names)?;
                    writeln!(code_output, "        l{}_{}.apply({}, input_key, {});", layer_idx, layer[0].function_name(), param_names, target_pred)?;
                }
                last_model_output = layer[0].output_type();
                needs_bounds_check = layer[0].needs_bounds_check();
            }

            writeln!(code_output, "{}", pred_to_model_index!(last_model_output))?;
            writeln!(code_output, "        f_clamp(model_index, {}, guess);", ModelParam::from(rmi.num_rmi_rows - 1).p4_val())?; // always bounds check the last level

        writeln!(code_output, "    }}")?;

    writeln!(code_output, "}}")?;

    /* P4 parsers, ingress & egress pipelines */
    writeln!(code_output,
"
/*************************************************************************
*********************** P A R S E R  ***********************************
*************************************************************************/

parser LearnedParser(packet_in packet, out headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {{
    state start {{
        transition parse_ethernet;
    }}

    state parse_ethernet {{
        packet.extract(hdr.ethernet);
        transition select(hdr.ethernet.etherType) {{
            TYPE_LEARNED: parse_learned;
            default: accept; // do not transition to parse learned state (will result in invalid learned header ; look at https://github.com/p4lang/tutorials/issues/308)
        }}
    }}

    state parse_learned {{
        packet.extract(hdr.learned);
        transition accept;
    }}
}}


/*************************************************************************
************   C H E C K S U M    V E R I F I C A T I O N   *************
*************************************************************************/

control LearnedVerifyChecksum(inout headers hdr, inout metadata meta) {{
    apply {{  }}
}}

/*************************************************************************
**************  I N G R E S S   P R O C E S S I N G   *******************
*************************************************************************/

control LearnedIngress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {{
    LearnedLookup() lookup_instance;

    action forward_back() {{
        macAddr_t tmp = hdr.ethernet.dstAddr;
        hdr.ethernet.dstAddr = hdr.ethernet.srcAddr;
        hdr.ethernet.srcAddr = tmp;

        standard_metadata.egress_spec = standard_metadata.ingress_port;
    }}

    apply {{
        if (hdr.learned.isValid()) {{
            lookup_instance.apply(hdr.learned.key, hdr.learned.guess, hdr.learned.err);
            forward_back();
        }}
    }}
}}

/*************************************************************************
****************  E G R E S S   P R O C E S S I N G   *******************
*************************************************************************/

control LearnedEgress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {{
    apply {{  }}
}}

/*************************************************************************
*************   C H E C K S U M    C O M P U T A T I O N   **************
*************************************************************************/

control LearnedComputeChecksum(inout headers hdr, inout metadata meta) {{
    apply {{ }}
}}


/*************************************************************************
***********************  D E P A R S E R  *******************************
*************************************************************************/

control LearnedDeparser(packet_out packet, in headers hdr) {{
    apply {{
        packet.emit(hdr.ethernet);
        packet.emit(hdr.learned);
    }}
}}

/*************************************************************************
***********************  S W I T C H  *******************************
*************************************************************************/

V1Switch(
LearnedParser(),
LearnedVerifyChecksum(),
LearnedIngress(),
LearnedEgress(),
LearnedComputeChecksum(),
LearnedDeparser()
) main;
"
    )?;


    let model_size_bytes = rmi_size(&rmi);
    info!("Generated model size: {:?} ({} bytes)", ByteSize(model_size_bytes), model_size_bytes);

    return generate_runtime(runtime_output, namespace, data_dir, &mut layer_params);
}

fn generate_runtime<T: Write>(runtime_output: &mut T, namespace: &str, data_dir: &str, layer_params: &mut Vec<LayerParams>) -> Result<(), std::io::Error> {

    /* document head, imports and constants */
    writeln!(runtime_output,
"
#!/usr/bin/env python3

import os
import sys
import argparse
import grpc
import struct
from time import sleep

from scapy.all import Packet, bind_layers
from scapy.all import Packet, Ether, IP, TCP, UDP, Raw
from scapy.all import IEEEFloatField, IEEEDoubleField, LongField, IntField

sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../utils/')) # Import P4Runtime lib from parent utils dir (is there a better way?)

import p4runtime_lib.bmv2
import p4runtime_lib.helper
from p4runtime_lib.error_utils import printGrpcError
from p4runtime_lib.switch import ShutdownAllSwitchConnections

LEARNED_TYPE = 0x8008
BATCH_SIZE = 2048

SIGN_MASK = 0x8000000000000000
EXPONENT_MASK = 0x7FF0000000000000
MANTISSA_MASK = 0x000FFFFFFFFFFFFF

class P4Learned(Packet):
    name = 'P4Learned'
    fields_desc = [ IEEEDoubleField('key', float(0)), LongField('guess', 0), LongField('error', 0) ]

bind_layers(Ether, P4Learned, type=LEARNED_TYPE)
"
    )?;

    /* writeParameters functions */
    for lp in layer_params.iter() {
        lp.runtime_code(namespace, data_dir, runtime_output)?;
    }

    /* main, initialize switch connection */
    writeln!(runtime_output,
"
def main(p4info_file_path, bmv2_file_path):
    p4info_helper = p4runtime_lib.helper.P4InfoHelper(p4info_file_path)

    try:
        switch = p4runtime_lib.bmv2.Bmv2SwitchConnection(
            name='s1',
            address='127.0.0.1:50051',
            device_id=0,
            proto_dump_file='logs/s1-p4runtime-requests.txt')
        switch.MasterArbitrationUpdate()

        switch.SetForwardingPipelineConfig(p4info=p4info_helper.p4info, bmv2_json_file_path=bmv2_file_path)
"
    )?;

    for lp in layer_params.iter() {
        match lp {
            LayerParams::Constant(_, _) => (),
            LayerParams::Array(idx, _, _) | LayerParams::MixedArray(idx, _, _) => {
                writeln!(runtime_output, "        writeL{}Parameters(p4info_helper, switch)", idx)?;
            }
        }
    }

    /* entry point, arg parser */
    writeln!(runtime_output,
"
    except KeyboardInterrupt:
        print(' Shutting down.')
    except grpc.RpcError as e:
        printGrpcError(e)

    ShutdownAllSwitchConnections()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='P4-Learned Runtime-Controller')
    parser.add_argument('--p4info', help='p4info proto in text format from p4c', type=str, action='store', required=False, default='./build/{}.p4.p4info.txt')
    parser.add_argument('--bmv2-json', help='BMv2 JSON file from p4c', type=str, action='store', required=False, default='./build/{}.json')
    args = parser.parse_args()

    if not os.path.exists(args.p4info):
        parser.print_help()
        print(\"\\np4info file not found: %s\\nHave you run 'make'?\" % args.p4info)
        parser.exit(1)
    if not os.path.exists(args.bmv2_json):
        parser.print_help()
        print(\"\\nBMv2 JSON file not found: %s\\nHave you run 'make'?\" % args.bmv2_json)
        parser.exit(1)
    main(args.p4info, args.bmv2_json)
",
    namespace, namespace)?;

    return Result::Ok(());
}

pub fn output_rmi(namespace: &str, trained_model: TrainedRMI, data_dir: &str, key_type: KeyType) -> Result<(), std::io::Error> {
    let f1 = File::create(format!("{}.p4", namespace)).expect("Could not write RMI P4 file");
    let mut bw1 = BufWriter::new(f1);

    let f2 = File::create(format!("{}_runtime.py", namespace)).expect("Could not write RMI P4 file");
    let mut bw2 = BufWriter::new(f2);

    return generate_code(&mut bw1, &mut bw2, namespace, data_dir, trained_model, key_type);
}

impl fmt::Display for LayerParams {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            LayerParams::Constant(idx, params) =>
                write!(f, "Constant(idx: {}, len: {})", idx, params.len()),
            LayerParams::Array(idx, ppm, params) =>
                write!(f, "Array(idx: {}, ppm: {}, len: {})", idx, ppm, params.len()),
            LayerParams::MixedArray(idx, ppm, params) =>
                write!(f, "MixedArray(idx: {}, ppm: {}, len: {})", idx, ppm, params.len())
        }
    }
}
